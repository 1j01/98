{
  "version": 3,
  "sources": ["../src/index.ts", "global-externals:@zenfs/core", "../node_modules/@zenfs/core/dist/emulation/path.js", "../src/utils.ts", "../src/access.ts", "../node_modules/@zenfs/core/dist/error.js", "../node_modules/@zenfs/core/dist/backends/store/store.js", "../src/IndexedDB.ts", "../src/Storage.ts"],
  "sourcesContent": ["export * from './access.js';\nexport * from './IndexedDB.js';\nexport * from './Storage.js';\n", "export default ZenFS;\nconst { Async, AsyncTransaction, BigIntStats, BigIntStatsFs, Dir, Dirent, Errno, ErrnoError, Fetch, FetchFS, File, FileSystem, FileType, InMemory, InMemoryStore, IndexFS, Inode, LockedFS, Mutex, NoSyncFile, Overlay, OverlayFS, Port, PortFS, PortFile, PreloadFile, ReadStream, Readonly, SimpleAsyncStore, SimpleTransaction, Stats, StatsCommon, StatsFs, StoreFS, Sync, SyncTransaction, Transaction, UnlockedOverlayFS, WriteStream, ZenFsType, _toUnixTimestamp, access, accessSync, appendFile, appendFileSync, attachFS, checkOptions, chmod, chmodSync, chown, chownSync, close, closeSync, configure, constants, copyFile, copyFileSync, cp, cpSync, createReadStream, createWriteStream, decode, decodeDirListing, detachFS, encode, encodeDirListing, errorMessages, exists, existsSync, fchmod, fchmodSync, fchown, fchownSync, fdatasync, fdatasyncSync, flagToMode, flagToNumber, flagToString, fs, fstat, fstatSync, fsync, fsyncSync, ftruncate, ftruncateSync, futimes, futimesSync, isAppendable, isBackend, isBackendConfig, isExclusive, isReadable, isSynchronous, isTruncating, isWriteable, lchmod, lchmodSync, lchown, lchownSync, levenshtein, link, linkSync, lopenSync, lstat, lstatSync, lutimes, lutimesSync, mkdir, mkdirSync, mkdirpSync, mkdtemp, mkdtempSync, mount, mountObject, mounts, nop, normalizeMode, normalizeOptions, normalizePath, normalizeTime, open, openAsBlob, openSync, opendir, opendirSync, parseFlag, promises, randomIno, read, readFile, readFileSync, readSync, readdir, readdirSync, readlink, readlinkSync, readv, readvSync, realpath, realpathSync, rename, renameSync, resolveMountConfig, rm, rmSync, rmdir, rmdirSync, rootCred, rootIno, setImmediate, size_max, stat, statSync, statfs, statfsSync, symlink, symlinkSync, truncate, truncateSync, umount, unlink, unlinkSync, unwatchFile, utimes, utimesSync, watch, watchFile, write, writeFile, writeFileSync, writeSync, writev, writevSync } = ZenFS;\nexport { Async, AsyncTransaction, BigIntStats, BigIntStatsFs, Dir, Dirent, Errno, ErrnoError, Fetch, FetchFS, File, FileSystem, FileType, InMemory, InMemoryStore, IndexFS, Inode, LockedFS, Mutex, NoSyncFile, Overlay, OverlayFS, Port, PortFS, PortFile, PreloadFile, ReadStream, Readonly, SimpleAsyncStore, SimpleTransaction, Stats, StatsCommon, StatsFs, StoreFS, Sync, SyncTransaction, Transaction, UnlockedOverlayFS, WriteStream, ZenFsType, _toUnixTimestamp, access, accessSync, appendFile, appendFileSync, attachFS, checkOptions, chmod, chmodSync, chown, chownSync, close, closeSync, configure, constants, copyFile, copyFileSync, cp, cpSync, createReadStream, createWriteStream, decode, decodeDirListing, detachFS, encode, encodeDirListing, errorMessages, exists, existsSync, fchmod, fchmodSync, fchown, fchownSync, fdatasync, fdatasyncSync, flagToMode, flagToNumber, flagToString, fs, fstat, fstatSync, fsync, fsyncSync, ftruncate, ftruncateSync, futimes, futimesSync, isAppendable, isBackend, isBackendConfig, isExclusive, isReadable, isSynchronous, isTruncating, isWriteable, lchmod, lchmodSync, lchown, lchownSync, levenshtein, link, linkSync, lopenSync, lstat, lstatSync, lutimes, lutimesSync, mkdir, mkdirSync, mkdirpSync, mkdtemp, mkdtempSync, mount, mountObject, mounts, nop, normalizeMode, normalizeOptions, normalizePath, normalizeTime, open, openAsBlob, openSync, opendir, opendirSync, parseFlag, promises, randomIno, read, readFile, readFileSync, readSync, readdir, readdirSync, readlink, readlinkSync, readv, readvSync, realpath, realpathSync, rename, renameSync, resolveMountConfig, rm, rmSync, rmdir, rmdirSync, rootCred, rootIno, setImmediate, size_max, stat, statSync, statfs, statfsSync, symlink, symlinkSync, truncate, truncateSync, umount, unlink, unlinkSync, unwatchFile, utimes, utimesSync, watch, watchFile, write, writeFile, writeFileSync, writeSync, writev, writevSync };", "/*\nCopyright Joyent, Inc. and other Node contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nexport let cwd = '/';\nexport function cd(path) {\n    cwd = resolve(cwd, path);\n}\nexport const sep = '/';\nfunction validateObject(str, name) {\n    if (typeof str != 'object') {\n        throw new TypeError(`\"${name}\" is not an object`);\n    }\n}\n// Resolves . and .. elements in a path with directory names\nexport function normalizeString(path, allowAboveRoot) {\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let char = '\\x00';\n    for (let i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            char = path[i];\n        }\n        else if (char == '/') {\n            break;\n        }\n        else {\n            char = '/';\n        }\n        if (char == '/') {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (dots === 2) {\n                if (res.length < 2 || lastSegmentLength !== 2 || res.at(-1) !== '.' || res.at(-2) !== '.') {\n                    if (res.length > 2) {\n                        const lastSlashIndex = res.lastIndexOf('/');\n                        if (lastSlashIndex === -1) {\n                            res = '';\n                            lastSegmentLength = 0;\n                        }\n                        else {\n                            res = res.slice(0, lastSlashIndex);\n                            lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                        }\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                    else if (res.length !== 0) {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    res += res.length > 0 ? '/..' : '..';\n                    lastSegmentLength = 2;\n                }\n            }\n            else {\n                if (res.length > 0)\n                    res += '/' + path.slice(lastSlash + 1, i);\n                else\n                    res = path.slice(lastSlash + 1, i);\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (char === '.' && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\nexport function formatExt(ext) {\n    return ext ? `${ext[0] === '.' ? '' : '.'}${ext}` : '';\n}\nexport function resolve(...parts) {\n    let resolved = '';\n    for (const part of [...parts.reverse(), cwd]) {\n        if (!part.length) {\n            continue;\n        }\n        resolved = `${part}/${resolved}`;\n        if (part.startsWith('/')) {\n            break;\n        }\n    }\n    const absolute = resolved.startsWith('/');\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when cwd fails)\n    // Normalize the path\n    resolved = normalizeString(resolved, !absolute);\n    if (absolute) {\n        return `/${resolved}`;\n    }\n    return resolved.length ? resolved : '/';\n}\nexport function normalize(path) {\n    if (!path.length)\n        return '.';\n    const isAbsolute = path.startsWith('/');\n    const trailingSeparator = path.endsWith('/');\n    // Normalize the path\n    path = normalizeString(path, !isAbsolute);\n    if (!path.length) {\n        if (isAbsolute)\n            return '/';\n        return trailingSeparator ? './' : '.';\n    }\n    if (trailingSeparator)\n        path += '/';\n    return isAbsolute ? `/${path}` : path;\n}\nexport function isAbsolute(path) {\n    return path.startsWith('/');\n}\nexport function join(...parts) {\n    if (!parts.length)\n        return '.';\n    const joined = parts.join('/');\n    if (!joined?.length)\n        return '.';\n    return normalize(joined);\n}\nexport function relative(from, to) {\n    if (from === to)\n        return '';\n    // Trim leading forward slashes.\n    from = resolve(from);\n    to = resolve(to);\n    if (from === to)\n        return '';\n    const fromStart = 1;\n    const fromEnd = from.length;\n    const fromLen = fromEnd - fromStart;\n    const toStart = 1;\n    const toLen = to.length - toStart;\n    // Compare paths to find the longest common path from root\n    const length = fromLen < toLen ? fromLen : toLen;\n    let lastCommonSep = -1;\n    let i = 0;\n    for (; i < length; i++) {\n        const fromCode = from[fromStart + i];\n        if (fromCode !== to[toStart + i])\n            break;\n        else if (fromCode === '/')\n            lastCommonSep = i;\n    }\n    if (i === length) {\n        if (toLen > length) {\n            if (to[toStart + i] === '/') {\n                // We get here if `from` is the exact base path for `to`.\n                // For example: from='/foo/bar'; to='/foo/bar/baz'\n                return to.slice(toStart + i + 1);\n            }\n            if (i === 0) {\n                // We get here if `from` is the root\n                // For example: from='/'; to='/foo'\n                return to.slice(toStart + i);\n            }\n        }\n        else if (fromLen > length) {\n            if (from[fromStart + i] === '/') {\n                // We get here if `to` is the exact base path for `from`.\n                // For example: from='/foo/bar/baz'; to='/foo/bar'\n                lastCommonSep = i;\n            }\n            else if (i === 0) {\n                // We get here if `to` is the root.\n                // For example: from='/foo/bar'; to='/'\n                lastCommonSep = 0;\n            }\n        }\n    }\n    let out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`.\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n        if (i === fromEnd || from[i] === '/') {\n            out += out.length === 0 ? '..' : '/..';\n        }\n    }\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts.\n    return `${out}${to.slice(toStart + lastCommonSep)}`;\n}\nexport function dirname(path) {\n    if (path.length === 0)\n        return '.';\n    const hasRoot = path[0] === '/';\n    let end = -1;\n    let matchedSlash = true;\n    for (let i = path.length - 1; i >= 1; --i) {\n        if (path[i] === '/') {\n            if (!matchedSlash) {\n                end = i;\n                break;\n            }\n        }\n        else {\n            // We saw the first non-path separator\n            matchedSlash = false;\n        }\n    }\n    if (end === -1)\n        return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1)\n        return '//';\n    return path.slice(0, end);\n}\nexport function basename(path, suffix) {\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n        if (suffix === path)\n            return '';\n        let extIdx = suffix.length - 1;\n        let firstNonSlashEnd = -1;\n        for (let i = path.length - 1; i >= 0; --i) {\n            if (path[i] === '/') {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else {\n                if (firstNonSlashEnd === -1) {\n                    // We saw the first non-path separator, remember this index in case\n                    // we need it if the extension ends up not matching\n                    matchedSlash = false;\n                    firstNonSlashEnd = i + 1;\n                }\n                if (extIdx >= 0) {\n                    // Try to match the explicit extension\n                    if (path[i] === suffix[extIdx]) {\n                        if (--extIdx === -1) {\n                            // We matched the extension, so mark this as the end of our path\n                            // component\n                            end = i;\n                        }\n                    }\n                    else {\n                        // Extension does not match, so our result is the entire path\n                        // component\n                        extIdx = -1;\n                        end = firstNonSlashEnd;\n                    }\n                }\n            }\n        }\n        if (start === end)\n            end = firstNonSlashEnd;\n        else if (end === -1)\n            end = path.length;\n        return path.slice(start, end);\n    }\n    for (let i = path.length - 1; i >= 0; --i) {\n        if (path[i] === '/') {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n                start = i + 1;\n                break;\n            }\n        }\n        else if (end === -1) {\n            // We saw the first non-path separator, mark this as the end of our\n            // path component\n            matchedSlash = false;\n            end = i + 1;\n        }\n    }\n    if (end === -1)\n        return '';\n    return path.slice(start, end);\n}\nexport function extname(path) {\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    for (let i = path.length - 1; i >= 0; --i) {\n        if (path[i] === '/') {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n                startPart = i + 1;\n                break;\n            }\n            continue;\n        }\n        if (end === -1) {\n            // We saw the first non-path separator, mark this as the end of our\n            // extension\n            matchedSlash = false;\n            end = i + 1;\n        }\n        if (path[i] === '.') {\n            // If this is our first dot, mark it as the start of our extension\n            if (startDot === -1)\n                startDot = i;\n            else if (preDotState !== 1)\n                preDotState = 1;\n        }\n        else if (startDot !== -1) {\n            // We saw a non-dot and non-path separator before our dot, so we should\n            // have a good chance at having a non-empty extension\n            preDotState = -1;\n        }\n    }\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n        return '';\n    }\n    return path.slice(startDot, end);\n}\nexport function format(pathObject) {\n    validateObject(pathObject, 'pathObject');\n    const dir = pathObject.dir || pathObject.root;\n    const base = pathObject.base || `${pathObject.name || ''}${formatExt(pathObject.ext)}`;\n    if (!dir) {\n        return base;\n    }\n    return dir === pathObject.root ? `${dir}${base}` : `${dir}/${base}`;\n}\nexport function parse(path) {\n    const isAbsolute = path.startsWith('/');\n    const ret = { root: isAbsolute ? '/' : '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0)\n        return ret;\n    const start = isAbsolute ? 1 : 0;\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path.length - 1;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    // Get non-dir info\n    for (; i >= start; --i) {\n        if (path[i] === '/') {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n                startPart = i + 1;\n                break;\n            }\n            continue;\n        }\n        if (end === -1) {\n            // We saw the first non-path separator, mark this as the end of our\n            // extension\n            matchedSlash = false;\n            end = i + 1;\n        }\n        if (path[i] === '.') {\n            // If this is our first dot, mark it as the start of our extension\n            if (startDot === -1)\n                startDot = i;\n            else if (preDotState !== 1)\n                preDotState = 1;\n        }\n        else if (startDot !== -1) {\n            // We saw a non-dot and non-path separator before our dot, so we should\n            // have a good chance at having a non-empty extension\n            preDotState = -1;\n        }\n    }\n    if (end !== -1) {\n        const start = startPart === 0 && isAbsolute ? 1 : startPart;\n        if (startDot === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n            ret.base = ret.name = path.slice(start, end);\n        }\n        else {\n            ret.name = path.slice(start, startDot);\n            ret.base = path.slice(start, end);\n            ret.ext = path.slice(startDot, end);\n        }\n    }\n    if (startPart > 0)\n        ret.dir = path.slice(0, startPart - 1);\n    else if (isAbsolute)\n        ret.dir = '/';\n    return ret;\n}\n", "import { ErrnoError, Errno } from '@zenfs/core';\n\n/**\n * Converts a DOMException into an Errno\n * @see https://developer.mozilla.org/Web/API/DOMException\n */\nfunction errnoForDOMException(ex: DOMException): keyof typeof Errno {\n\tswitch (ex.name) {\n\t\tcase 'IndexSizeError':\n\t\tcase 'HierarchyRequestError':\n\t\tcase 'InvalidCharacterError':\n\t\tcase 'InvalidStateError':\n\t\tcase 'SyntaxError':\n\t\tcase 'NamespaceError':\n\t\tcase 'TypeMismatchError':\n\t\tcase 'ConstraintError':\n\t\tcase 'VersionError':\n\t\tcase 'URLMismatchError':\n\t\tcase 'InvalidNodeTypeError':\n\t\t\treturn 'EINVAL';\n\t\tcase 'WrongDocumentError':\n\t\t\treturn 'EXDEV';\n\t\tcase 'NoModificationAllowedError':\n\t\tcase 'InvalidModificationError':\n\t\tcase 'InvalidAccessError':\n\t\tcase 'SecurityError':\n\t\tcase 'NotAllowedError':\n\t\t\treturn 'EACCES';\n\t\tcase 'NotFoundError':\n\t\t\treturn 'ENOENT';\n\t\tcase 'NotSupportedError':\n\t\t\treturn 'ENOTSUP';\n\t\tcase 'InUseAttributeError':\n\t\t\treturn 'EBUSY';\n\t\tcase 'NetworkError':\n\t\t\treturn 'ENETDOWN';\n\t\tcase 'AbortError':\n\t\t\treturn 'EINTR';\n\t\tcase 'QuotaExceededError':\n\t\t\treturn 'ENOSPC';\n\t\tcase 'TimeoutError':\n\t\t\treturn 'ETIMEDOUT';\n\t\tcase 'ReadOnlyError':\n\t\t\treturn 'EROFS';\n\t\tcase 'DataCloneError':\n\t\tcase 'EncodingError':\n\t\tcase 'NotReadableError':\n\t\tcase 'DataError':\n\t\tcase 'TransactionInactiveError':\n\t\tcase 'OperationError':\n\t\tcase 'UnknownError':\n\t\tdefault:\n\t\t\treturn 'EIO';\n\t}\n}\n\n/**\n * @internal\n */\nexport type ConvertException = ErrnoError | DOMException | Error;\n\n/**\n * Handles converting errors, then rethrowing them\n * @internal\n */\nexport function convertException(ex: ConvertException, path?: string, syscall?: string): ErrnoError {\n\tif (ex instanceof ErrnoError) {\n\t\treturn ex;\n\t}\n\n\tconst code = ex instanceof DOMException ? Errno[errnoForDOMException(ex)] : Errno.EIO;\n\tconst error = new ErrnoError(code, ex.message, path, syscall);\n\terror.stack = ex.stack!;\n\terror.cause = ex.cause;\n\treturn error;\n}\n", "import type { Backend, FileSystemMetadata } from '@zenfs/core';\nimport { ErrnoError, Async, Errno, FileSystem, FileType, InMemory, PreloadFile, Stats } from '@zenfs/core';\nimport { basename, dirname, join } from '@zenfs/core/emulation/path.js';\nimport { convertException, type ConvertException } from './utils.js';\n\ndeclare global {\n\tinterface FileSystemDirectoryHandle {\n\t\t[Symbol.iterator](): IterableIterator<[string, FileSystemHandle]>;\n\t\tentries(): IterableIterator<[string, FileSystemHandle]>;\n\t\tkeys(): IterableIterator<string>;\n\t\tvalues(): IterableIterator<FileSystemHandle>;\n\t}\n}\n\nexport interface WebAccessOptions {\n\thandle: FileSystemDirectoryHandle;\n}\n\nexport class WebAccessFS extends Async(FileSystem) {\n\tprivate _handles: Map<string, FileSystemHandle> = new Map();\n\n\t/**\n\t * @hidden\n\t */\n\t_sync: FileSystem = InMemory.create({ name: 'accessfs-cache' });\n\n\tpublic constructor(handle: FileSystemDirectoryHandle) {\n\t\tsuper();\n\t\tthis._handles.set('/', handle);\n\t}\n\n\tpublic metadata(): FileSystemMetadata {\n\t\treturn {\n\t\t\t...super.metadata(),\n\t\t\tname: 'WebAccess',\n\t\t\tnoResizableBuffers: true,\n\t\t};\n\t}\n\n\tpublic async sync(path: string, data: Uint8Array, stats: Stats): Promise<void> {\n\t\tconst currentStats = await this.stat(path);\n\t\tif (stats.mtime !== currentStats!.mtime) {\n\t\t\tawait this.writeFile(path, data);\n\t\t}\n\t}\n\n\tpublic async rename(oldPath: string, newPath: string): Promise<void> {\n\t\ttry {\n\t\t\tconst handle = await this.getHandle(oldPath);\n\t\t\tif (handle instanceof FileSystemDirectoryHandle) {\n\t\t\t\tconst files = await this.readdir(oldPath);\n\n\t\t\t\tawait this.mkdir(newPath);\n\t\t\t\tif (files.length == 0) {\n\t\t\t\t\tawait this.unlink(oldPath);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const file of files) {\n\t\t\t\t\t\tawait this.rename(join(oldPath, file), join(newPath, file));\n\t\t\t\t\t\tawait this.unlink(oldPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!(handle instanceof FileSystemFileHandle)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst oldFile = await handle.getFile(),\n\t\t\t\tdestFolder = await this.getHandle(dirname(newPath));\n\t\t\tif (!(destFolder instanceof FileSystemDirectoryHandle)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst newFile = await destFolder.getFileHandle(basename(newPath), { create: true });\n\t\t\tconst writable = await newFile.createWritable();\n\t\t\tawait writable.write(await oldFile.arrayBuffer());\n\n\t\t\twritable.close();\n\t\t\tawait this.unlink(oldPath);\n\t\t} catch (ex) {\n\t\t\tthrow convertException(ex as ConvertException, oldPath, 'rename');\n\t\t}\n\t}\n\n\tpublic async writeFile(path: string, data: Uint8Array): Promise<void> {\n\t\tif (data.buffer.resizable) {\n\t\t\tthrow new ErrnoError(Errno.EINVAL, 'Resizable buffers can not be written', path, 'write');\n\t\t}\n\n\t\tconst handle = await this.getHandle(dirname(path));\n\t\tif (!(handle instanceof FileSystemDirectoryHandle)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst file = await handle.getFileHandle(basename(path), { create: true });\n\t\tconst writable = await file.createWritable();\n\t\tawait writable.write(data);\n\t\tawait writable.close();\n\t}\n\n\tpublic async createFile(path: string, flag: string): Promise<PreloadFile<this>> {\n\t\tawait this.writeFile(path, new Uint8Array());\n\t\treturn this.openFile(path, flag);\n\t}\n\n\tpublic async stat(path: string): Promise<Stats> {\n\t\tconst handle = await this.getHandle(path);\n\t\tif (!handle) {\n\t\t\tthrow ErrnoError.With('ENOENT', path, 'stat');\n\t\t}\n\t\tif (handle instanceof FileSystemDirectoryHandle) {\n\t\t\treturn new Stats({ mode: 0o777 | FileType.DIRECTORY, size: 4096 });\n\t\t}\n\t\tif (handle instanceof FileSystemFileHandle) {\n\t\t\tconst { lastModified, size } = await handle.getFile();\n\t\t\treturn new Stats({ mode: 0o777 | FileType.FILE, size, mtimeMs: lastModified });\n\t\t}\n\t\tthrow new ErrnoError(Errno.EBADE, 'Handle is not a directory or file', path, 'stat');\n\t}\n\n\tpublic async openFile(path: string, flag: string): Promise<PreloadFile<this>> {\n\t\tconst handle = await this.getHandle(path);\n\t\tif (!(handle instanceof FileSystemFileHandle)) {\n\t\t\tthrow ErrnoError.With('EISDIR', path, 'openFile');\n\t\t}\n\t\ttry {\n\t\t\tconst file = await handle.getFile();\n\t\t\tconst data = new Uint8Array(await file.arrayBuffer());\n\t\t\tconst stats = new Stats({ mode: 0o777 | FileType.FILE, size: file.size, mtimeMs: file.lastModified });\n\t\t\treturn new PreloadFile(this, path, flag, stats, data);\n\t\t} catch (ex) {\n\t\t\tthrow convertException(ex as ConvertException, path, 'openFile');\n\t\t}\n\t}\n\n\tpublic async unlink(path: string): Promise<void> {\n\t\tconst handle = await this.getHandle(dirname(path));\n\t\tif (handle instanceof FileSystemDirectoryHandle) {\n\t\t\ttry {\n\t\t\t\tawait handle.removeEntry(basename(path), { recursive: true });\n\t\t\t} catch (ex) {\n\t\t\t\tthrow convertException(ex as ConvertException, path, 'unlink');\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async link(srcpath: string): Promise<void> {\n\t\tthrow ErrnoError.With('ENOSYS', srcpath, 'WebAccessFS.link');\n\t}\n\n\tpublic async rmdir(path: string): Promise<void> {\n\t\treturn this.unlink(path);\n\t}\n\n\tpublic async mkdir(path: string): Promise<void> {\n\t\tconst existingHandle = await this.getHandle(path);\n\t\tif (existingHandle) {\n\t\t\tthrow ErrnoError.With('EEXIST', path, 'mkdir');\n\t\t}\n\n\t\tconst handle = await this.getHandle(dirname(path));\n\t\tif (!(handle instanceof FileSystemDirectoryHandle)) {\n\t\t\tthrow ErrnoError.With('ENOTDIR', path, 'mkdir');\n\t\t}\n\t\tawait handle.getDirectoryHandle(basename(path), { create: true });\n\t}\n\n\tpublic async readdir(path: string): Promise<string[]> {\n\t\tconst handle = await this.getHandle(path);\n\t\tif (!(handle instanceof FileSystemDirectoryHandle)) {\n\t\t\tthrow ErrnoError.With('ENOTDIR', path, 'readdir');\n\t\t}\n\t\tconst keys: string[] = [];\n\t\tfor await (const key of handle.keys()) {\n\t\t\tkeys.push(key);\n\t\t}\n\t\treturn keys;\n\t}\n\n\tprotected async getHandle(path: string): Promise<FileSystemHandle> {\n\t\tif (this._handles.has(path)) {\n\t\t\treturn this._handles.get(path)!;\n\t\t}\n\n\t\tlet walked = '/';\n\n\t\tfor (const part of path.split('/').slice(1)) {\n\t\t\tconst handle = this._handles.get(walked);\n\t\t\tif (!(handle instanceof FileSystemDirectoryHandle)) {\n\t\t\t\tthrow ErrnoError.With('ENOTDIR', walked, 'getHandle');\n\t\t\t}\n\t\t\twalked = join(walked, part);\n\n\t\t\ttry {\n\t\t\t\tconst dirHandle = await handle.getDirectoryHandle(part);\n\t\t\t\tthis._handles.set(walked, dirHandle);\n\t\t\t} catch (_ex) {\n\t\t\t\tconst ex = _ex as DOMException;\n\t\t\t\tif (ex.name == 'TypeMismatchError') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fileHandle = await handle.getFileHandle(part);\n\t\t\t\t\t\tthis._handles.set(walked, fileHandle);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tconvertException(ex as ConvertException, walked, 'getHandle');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (ex.name === 'TypeError') {\n\t\t\t\t\tthrow new ErrnoError(Errno.ENOENT, ex.message, walked, 'getHandle');\n\t\t\t\t}\n\n\t\t\t\tconvertException(ex, walked, 'getHandle');\n\t\t\t}\n\t\t}\n\n\t\treturn this._handles.get(path)!;\n\t}\n}\n\nexport const WebAccess = {\n\tname: 'WebAccess',\n\n\toptions: {\n\t\thandle: {\n\t\t\ttype: 'object',\n\t\t\trequired: true,\n\t\t\tdescription: 'The directory handle to use for the root',\n\t\t},\n\t},\n\n\tisAvailable(): boolean {\n\t\treturn typeof FileSystemHandle == 'function';\n\t},\n\n\tcreate(options: WebAccessOptions) {\n\t\treturn new WebAccessFS(options.handle);\n\t},\n} as const satisfies Backend<WebAccessFS, WebAccessOptions>;\n", "/**\n * Standard libc error codes. More will be added to this enum and error strings as they are\n * needed.\n * @see https://en.wikipedia.org/wiki/Errno.h\n */\nexport var Errno;\n(function (Errno) {\n    /** Operation not permitted */\n    Errno[Errno[\"EPERM\"] = 1] = \"EPERM\";\n    /** No such file or directory */\n    Errno[Errno[\"ENOENT\"] = 2] = \"ENOENT\";\n    /** Interrupted system call */\n    Errno[Errno[\"EINTR\"] = 4] = \"EINTR\";\n    /** Input/output error */\n    Errno[Errno[\"EIO\"] = 5] = \"EIO\";\n    /** No such device or address */\n    Errno[Errno[\"ENXIO\"] = 6] = \"ENXIO\";\n    /** Bad file descriptor */\n    Errno[Errno[\"EBADF\"] = 9] = \"EBADF\";\n    /** Resource temporarily unavailable */\n    Errno[Errno[\"EAGAIN\"] = 11] = \"EAGAIN\";\n    /** Cannot allocate memory */\n    Errno[Errno[\"ENOMEM\"] = 12] = \"ENOMEM\";\n    /** Permission denied */\n    Errno[Errno[\"EACCES\"] = 13] = \"EACCES\";\n    /** Bad address */\n    Errno[Errno[\"EFAULT\"] = 14] = \"EFAULT\";\n    /** Block device required */\n    Errno[Errno[\"ENOTBLK\"] = 15] = \"ENOTBLK\";\n    /** Resource busy or locked */\n    Errno[Errno[\"EBUSY\"] = 16] = \"EBUSY\";\n    /** File exists */\n    Errno[Errno[\"EEXIST\"] = 17] = \"EEXIST\";\n    /** Invalid cross-device link */\n    Errno[Errno[\"EXDEV\"] = 18] = \"EXDEV\";\n    /** No such device */\n    Errno[Errno[\"ENODEV\"] = 19] = \"ENODEV\";\n    /** File is not a directory */\n    Errno[Errno[\"ENOTDIR\"] = 20] = \"ENOTDIR\";\n    /** File is a directory */\n    Errno[Errno[\"EISDIR\"] = 21] = \"EISDIR\";\n    /** Invalid argument */\n    Errno[Errno[\"EINVAL\"] = 22] = \"EINVAL\";\n    /** Too many open files in system */\n    Errno[Errno[\"ENFILE\"] = 23] = \"ENFILE\";\n    /** Too many open files */\n    Errno[Errno[\"EMFILE\"] = 24] = \"EMFILE\";\n    /** Text file busy */\n    Errno[Errno[\"ETXTBSY\"] = 26] = \"ETXTBSY\";\n    /** File is too big */\n    Errno[Errno[\"EFBIG\"] = 27] = \"EFBIG\";\n    /** No space left on disk */\n    Errno[Errno[\"ENOSPC\"] = 28] = \"ENOSPC\";\n    /** Illegal seek */\n    Errno[Errno[\"ESPIPE\"] = 29] = \"ESPIPE\";\n    /** Cannot modify a read-only file system */\n    Errno[Errno[\"EROFS\"] = 30] = \"EROFS\";\n    /** Too many links */\n    Errno[Errno[\"EMLINK\"] = 31] = \"EMLINK\";\n    /** Broken pipe */\n    Errno[Errno[\"EPIPE\"] = 32] = \"EPIPE\";\n    /** Numerical argument out of domain */\n    Errno[Errno[\"EDOM\"] = 33] = \"EDOM\";\n    /** Numerical result out of range */\n    Errno[Errno[\"ERANGE\"] = 34] = \"ERANGE\";\n    /** Resource deadlock would occur */\n    Errno[Errno[\"EDEADLK\"] = 35] = \"EDEADLK\";\n    /** File name too long */\n    Errno[Errno[\"ENAMETOOLONG\"] = 36] = \"ENAMETOOLONG\";\n    /** No locks available */\n    Errno[Errno[\"ENOLCK\"] = 37] = \"ENOLCK\";\n    /** Function not implemented */\n    Errno[Errno[\"ENOSYS\"] = 38] = \"ENOSYS\";\n    /** Directory is not empty */\n    Errno[Errno[\"ENOTEMPTY\"] = 39] = \"ENOTEMPTY\";\n    /** Too many levels of symbolic links */\n    Errno[Errno[\"ELOOP\"] = 40] = \"ELOOP\";\n    /** No message of desired type */\n    Errno[Errno[\"ENOMSG\"] = 42] = \"ENOMSG\";\n    /** Invalid exchange */\n    Errno[Errno[\"EBADE\"] = 52] = \"EBADE\";\n    /** Invalid request descriptor */\n    Errno[Errno[\"EBADR\"] = 53] = \"EBADR\";\n    /** Exchange full */\n    Errno[Errno[\"EXFULL\"] = 54] = \"EXFULL\";\n    /** No anode */\n    Errno[Errno[\"ENOANO\"] = 55] = \"ENOANO\";\n    /** Invalid request code */\n    Errno[Errno[\"EBADRQC\"] = 56] = \"EBADRQC\";\n    /** Device not a stream */\n    Errno[Errno[\"ENOSTR\"] = 60] = \"ENOSTR\";\n    /** No data available */\n    Errno[Errno[\"ENODATA\"] = 61] = \"ENODATA\";\n    /** Timer expired */\n    Errno[Errno[\"ETIME\"] = 62] = \"ETIME\";\n    /** Out of streams resources */\n    Errno[Errno[\"ENOSR\"] = 63] = \"ENOSR\";\n    /** Machine is not on the network */\n    Errno[Errno[\"ENONET\"] = 64] = \"ENONET\";\n    /** Object is remote */\n    Errno[Errno[\"EREMOTE\"] = 66] = \"EREMOTE\";\n    /** Link has been severed */\n    Errno[Errno[\"ENOLINK\"] = 67] = \"ENOLINK\";\n    /** Communication error on send */\n    Errno[Errno[\"ECOMM\"] = 70] = \"ECOMM\";\n    /** Protocol error */\n    Errno[Errno[\"EPROTO\"] = 71] = \"EPROTO\";\n    /** Bad message */\n    Errno[Errno[\"EBADMSG\"] = 74] = \"EBADMSG\";\n    /** Value too large for defined data type */\n    Errno[Errno[\"EOVERFLOW\"] = 75] = \"EOVERFLOW\";\n    /** File descriptor in bad state */\n    Errno[Errno[\"EBADFD\"] = 77] = \"EBADFD\";\n    /** Streams pipe error */\n    Errno[Errno[\"ESTRPIPE\"] = 86] = \"ESTRPIPE\";\n    /** Socket operation on non-socket */\n    Errno[Errno[\"ENOTSOCK\"] = 88] = \"ENOTSOCK\";\n    /** Destination address required */\n    Errno[Errno[\"EDESTADDRREQ\"] = 89] = \"EDESTADDRREQ\";\n    /** Message too long */\n    Errno[Errno[\"EMSGSIZE\"] = 90] = \"EMSGSIZE\";\n    /** Protocol wrong type for socket */\n    Errno[Errno[\"EPROTOTYPE\"] = 91] = \"EPROTOTYPE\";\n    /** Protocol not available */\n    Errno[Errno[\"ENOPROTOOPT\"] = 92] = \"ENOPROTOOPT\";\n    /** Protocol not supported */\n    Errno[Errno[\"EPROTONOSUPPORT\"] = 93] = \"EPROTONOSUPPORT\";\n    /** Socket type not supported */\n    Errno[Errno[\"ESOCKTNOSUPPORT\"] = 94] = \"ESOCKTNOSUPPORT\";\n    /** Operation is not supported */\n    Errno[Errno[\"ENOTSUP\"] = 95] = \"ENOTSUP\";\n    /** Network is down */\n    Errno[Errno[\"ENETDOWN\"] = 100] = \"ENETDOWN\";\n    /** Network is unreachable */\n    Errno[Errno[\"ENETUNREACH\"] = 101] = \"ENETUNREACH\";\n    /** Network dropped connection on reset */\n    Errno[Errno[\"ENETRESET\"] = 102] = \"ENETRESET\";\n    /** Connection timed out */\n    Errno[Errno[\"ETIMEDOUT\"] = 110] = \"ETIMEDOUT\";\n    /** Connection refused */\n    Errno[Errno[\"ECONNREFUSED\"] = 111] = \"ECONNREFUSED\";\n    /** Host is down */\n    Errno[Errno[\"EHOSTDOWN\"] = 112] = \"EHOSTDOWN\";\n    /** No route to host */\n    Errno[Errno[\"EHOSTUNREACH\"] = 113] = \"EHOSTUNREACH\";\n    /** Operation already in progress */\n    Errno[Errno[\"EALREADY\"] = 114] = \"EALREADY\";\n    /** Operation now in progress */\n    Errno[Errno[\"EINPROGRESS\"] = 115] = \"EINPROGRESS\";\n    /** Stale file handle */\n    Errno[Errno[\"ESTALE\"] = 116] = \"ESTALE\";\n    /** Remote I/O error */\n    Errno[Errno[\"EREMOTEIO\"] = 121] = \"EREMOTEIO\";\n    /** Disk quota exceeded */\n    Errno[Errno[\"EDQUOT\"] = 122] = \"EDQUOT\";\n})(Errno || (Errno = {}));\n/**\n * Strings associated with each error code.\n * @internal\n */\nexport const errorMessages = {\n    [Errno.EPERM]: 'Operation not permitted',\n    [Errno.ENOENT]: 'No such file or directory',\n    [Errno.EINTR]: 'Interrupted system call',\n    [Errno.EIO]: 'Input/output error',\n    [Errno.ENXIO]: 'No such device or address',\n    [Errno.EBADF]: 'Bad file descriptor',\n    [Errno.EAGAIN]: 'Resource temporarily unavailable',\n    [Errno.ENOMEM]: 'Cannot allocate memory',\n    [Errno.EACCES]: 'Permission denied',\n    [Errno.EFAULT]: 'Bad address',\n    [Errno.ENOTBLK]: 'Block device required',\n    [Errno.EBUSY]: 'Resource busy or locked',\n    [Errno.EEXIST]: 'File exists',\n    [Errno.EXDEV]: 'Invalid cross-device link',\n    [Errno.ENODEV]: 'No such device',\n    [Errno.ENOTDIR]: 'File is not a directory',\n    [Errno.EISDIR]: 'File is a directory',\n    [Errno.EINVAL]: 'Invalid argument',\n    [Errno.ENFILE]: 'Too many open files in system',\n    [Errno.EMFILE]: 'Too many open files',\n    [Errno.ETXTBSY]: 'Text file busy',\n    [Errno.EFBIG]: 'File is too big',\n    [Errno.ENOSPC]: 'No space left on disk',\n    [Errno.ESPIPE]: 'Illegal seek',\n    [Errno.EROFS]: 'Cannot modify a read-only file system',\n    [Errno.EMLINK]: 'Too many links',\n    [Errno.EPIPE]: 'Broken pipe',\n    [Errno.EDOM]: 'Numerical argument out of domain',\n    [Errno.ERANGE]: 'Numerical result out of range',\n    [Errno.EDEADLK]: 'Resource deadlock would occur',\n    [Errno.ENAMETOOLONG]: 'File name too long',\n    [Errno.ENOLCK]: 'No locks available',\n    [Errno.ENOSYS]: 'Function not implemented',\n    [Errno.ENOTEMPTY]: 'Directory is not empty',\n    [Errno.ELOOP]: 'Too many levels of symbolic links',\n    [Errno.ENOMSG]: 'No message of desired type',\n    [Errno.EBADE]: 'Invalid exchange',\n    [Errno.EBADR]: 'Invalid request descriptor',\n    [Errno.EXFULL]: 'Exchange full',\n    [Errno.ENOANO]: 'No anode',\n    [Errno.EBADRQC]: 'Invalid request code',\n    [Errno.ENOSTR]: 'Device not a stream',\n    [Errno.ENODATA]: 'No data available',\n    [Errno.ETIME]: 'Timer expired',\n    [Errno.ENOSR]: 'Out of streams resources',\n    [Errno.ENONET]: 'Machine is not on the network',\n    [Errno.EREMOTE]: 'Object is remote',\n    [Errno.ENOLINK]: 'Link has been severed',\n    [Errno.ECOMM]: 'Communication error on send',\n    [Errno.EPROTO]: 'Protocol error',\n    [Errno.EBADMSG]: 'Bad message',\n    [Errno.EOVERFLOW]: 'Value too large for defined data type',\n    [Errno.EBADFD]: 'File descriptor in bad state',\n    [Errno.ESTRPIPE]: 'Streams pipe error',\n    [Errno.ENOTSOCK]: 'Socket operation on non-socket',\n    [Errno.EDESTADDRREQ]: 'Destination address required',\n    [Errno.EMSGSIZE]: 'Message too long',\n    [Errno.EPROTOTYPE]: 'Protocol wrong type for socket',\n    [Errno.ENOPROTOOPT]: 'Protocol not available',\n    [Errno.EPROTONOSUPPORT]: 'Protocol not supported',\n    [Errno.ESOCKTNOSUPPORT]: 'Socket type not supported',\n    [Errno.ENOTSUP]: 'Operation is not supported',\n    [Errno.ENETDOWN]: 'Network is down',\n    [Errno.ENETUNREACH]: 'Network is unreachable',\n    [Errno.ENETRESET]: 'Network dropped connection on reset',\n    [Errno.ETIMEDOUT]: 'Connection timed out',\n    [Errno.ECONNREFUSED]: 'Connection refused',\n    [Errno.EHOSTDOWN]: 'Host is down',\n    [Errno.EHOSTUNREACH]: 'No route to host',\n    [Errno.EALREADY]: 'Operation already in progress',\n    [Errno.EINPROGRESS]: 'Operation now in progress',\n    [Errno.ESTALE]: 'Stale file handle',\n    [Errno.EREMOTEIO]: 'Remote I/O error',\n    [Errno.EDQUOT]: 'Disk quota exceeded',\n};\n/**\n * Represents a ZenFS error. Passed back to applications after a failed\n * call to the ZenFS API.\n */\nexport class ErrnoError extends Error {\n    static fromJSON(json) {\n        const err = new ErrnoError(json.errno, json.message, json.path, json.syscall);\n        err.code = json.code;\n        err.stack = json.stack;\n        return err;\n    }\n    static With(code, path, syscall) {\n        return new ErrnoError(Errno[code], errorMessages[Errno[code]], path, syscall);\n    }\n    /**\n     * Represents a ZenFS error. Passed back to applications after a failed\n     * call to the ZenFS API.\n     *\n     * Error codes mirror those returned by regular Unix file operations, which is\n     * what Node returns.\n     * @param type The type of the error.\n     * @param message A descriptive error message.\n     */\n    constructor(errno, message = errorMessages[errno], path, syscall = '') {\n        super(message);\n        this.errno = errno;\n        this.path = path;\n        this.syscall = syscall;\n        this.code = Errno[errno];\n        this.message = `${this.code}: ${message}${this.path ? `, '${this.path}'` : ''}`;\n    }\n    /**\n     * @return A friendly error message.\n     */\n    toString() {\n        return this.message;\n    }\n    toJSON() {\n        return {\n            errno: this.errno,\n            code: this.code,\n            path: this.path,\n            stack: this.stack,\n            message: this.message,\n            syscall: this.syscall,\n        };\n    }\n    /**\n     * The size of the API error in buffer-form in bytes.\n     */\n    bufferSize() {\n        // 4 bytes for string length.\n        return 4 + JSON.stringify(this.toJSON()).length;\n    }\n}\n", "import { ErrnoError } from '../../error.js';\n/**\n * A transaction for a store.\n */\nexport class Transaction {\n    constructor(store) {\n        this.store = store;\n        this.aborted = false;\n    }\n    async [Symbol.asyncDispose]() {\n        if (this.aborted) {\n            return;\n        }\n        await this.commit();\n    }\n    [Symbol.dispose]() {\n        if (this.aborted) {\n            return;\n        }\n        this.commitSync();\n    }\n}\n/**\n * Transaction that implements asynchronous operations with synchronous ones\n */\nexport class SyncTransaction extends Transaction {\n    async get(ino) {\n        return this.getSync(ino);\n    }\n    async set(ino, data) {\n        return this.setSync(ino, data);\n    }\n    async remove(ino) {\n        return this.removeSync(ino);\n    }\n    async commit() {\n        return this.commitSync();\n    }\n    async abort() {\n        return this.abortSync();\n    }\n}\n/**\n * Transaction that only supports asynchronous operations\n */\nexport class AsyncTransaction extends Transaction {\n    getSync() {\n        throw ErrnoError.With('ENOSYS', undefined, 'AsyncTransaction.getSync');\n    }\n    setSync() {\n        throw ErrnoError.With('ENOSYS', undefined, 'AsyncTransaction.setSync');\n    }\n    removeSync() {\n        throw ErrnoError.With('ENOSYS', undefined, 'AsyncTransaction.removeSync');\n    }\n    commitSync() {\n        throw ErrnoError.With('ENOSYS', undefined, 'AsyncTransaction.commitSync');\n    }\n    abortSync() {\n        throw ErrnoError.With('ENOSYS', undefined, 'AsyncTransaction.abortSync');\n    }\n}\n", "import type { Store } from '@zenfs/core/backends/store/store.js';\nimport { AsyncTransaction } from '@zenfs/core/backends/store/store.js';\nimport type { Backend, Ino, SharedConfig } from '@zenfs/core';\nimport { Async, ErrnoError, InMemory, StoreFS } from '@zenfs/core';\nimport { convertException, type ConvertException } from './utils.js';\n\nfunction wrap<T>(request: IDBRequest<T>): Promise<T> {\n\treturn new Promise((resolve, reject) => {\n\t\trequest.onsuccess = () => resolve(request.result);\n\t\trequest.onerror = e => {\n\t\t\te.preventDefault();\n\t\t\treject(convertException(request.error!));\n\t\t};\n\t});\n}\n\n/**\n * @hidden\n */\nexport class IndexedDBTransaction extends AsyncTransaction<IndexedDBStore> {\n\tprivate _idb: IDBObjectStore;\n\n\tconstructor(\n\t\tpublic tx: IDBTransaction,\n\t\tpublic store: IndexedDBStore\n\t) {\n\t\tsuper(store);\n\t\tthis._idb = tx.objectStore(store.name);\n\t}\n\n\tpublic get(key: Ino): Promise<Uint8Array> {\n\t\treturn wrap(this._idb.get(key.toString()));\n\t}\n\n\tpublic async set(key: Ino, data: Uint8Array): Promise<void> {\n\t\tawait wrap(this._idb.put(data, key.toString()));\n\t}\n\n\tpublic remove(key: Ino): Promise<void> {\n\t\treturn wrap(this._idb.delete(key.toString()));\n\t}\n\n\tpublic async commit(): Promise<void> {\n\t\tthis.tx.commit();\n\t}\n\n\tpublic async abort(): Promise<void> {\n\t\ttry {\n\t\t\tthis.tx.abort();\n\t\t} catch (e) {\n\t\t\tthrow convertException(e as ConvertException);\n\t\t}\n\t}\n}\n\nasync function createDB(name: string, indexedDB: IDBFactory = globalThis.indexedDB): Promise<IDBDatabase> {\n\tconst req: IDBOpenDBRequest = indexedDB.open(name);\n\n\treq.onupgradeneeded = () => {\n\t\tconst db: IDBDatabase = req.result;\n\t\t// This should never happen; we're at version 1. Why does another database exist?\n\t\tif (db.objectStoreNames.contains(name)) {\n\t\t\tdb.deleteObjectStore(name);\n\t\t}\n\t\tdb.createObjectStore(name);\n\t};\n\n\tconst result = await wrap(req);\n\treturn result;\n}\n\nexport class IndexedDBStore implements Store {\n\tpublic constructor(protected db: IDBDatabase) {}\n\n\tpublic sync(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic get name(): string {\n\t\treturn this.db.name;\n\t}\n\n\tpublic clear(): Promise<void> {\n\t\treturn wrap(this.db.transaction(this.name, 'readwrite').objectStore(this.name).clear());\n\t}\n\n\tpublic clearSync(): void {\n\t\tthrow ErrnoError.With('ENOSYS', undefined, 'IndexedDBStore.clearSync');\n\t}\n\n\tpublic transaction(): IndexedDBTransaction {\n\t\tconst tx = this.db.transaction(this.name, 'readwrite');\n\t\treturn new IndexedDBTransaction(tx, this);\n\t}\n}\n\n/**\n * Configuration options for the IndexedDB file system.\n */\nexport interface IndexedDBOptions {\n\t/**\n\t * The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name.\n\t */\n\tstoreName?: string;\n\n\t/**\n\t * The IDBFactory to use. Defaults to `globalThis.indexedDB`.\n\t */\n\tidbFactory?: IDBFactory;\n}\n\n/**\n * A file system that uses the IndexedDB key value file system.\n */\n\nexport const IndexedDB = {\n\tname: 'IndexedDB',\n\n\toptions: {\n\t\tstoreName: {\n\t\t\ttype: 'string',\n\t\t\trequired: false,\n\t\t\tdescription: 'The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name.',\n\t\t},\n\t\tidbFactory: {\n\t\t\ttype: 'object',\n\t\t\trequired: false,\n\t\t\tdescription: 'The IDBFactory to use. Defaults to globalThis.indexedDB.',\n\t\t},\n\t},\n\n\tasync isAvailable(idbFactory: IDBFactory = globalThis.indexedDB): Promise<boolean> {\n\t\ttry {\n\t\t\tif (!(idbFactory instanceof IDBFactory)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst req = idbFactory.open('__zenfs_test');\n\t\t\tawait wrap(req);\n\t\t\tidbFactory.deleteDatabase('__zenfs_test');\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\tidbFactory.deleteDatabase('__zenfs_test');\n\t\t\treturn false;\n\t\t}\n\t},\n\n\tasync create(options: IndexedDBOptions & Partial<SharedConfig>) {\n\t\tconst db = await createDB(options.storeName || 'zenfs', options.idbFactory);\n\t\tconst store = new IndexedDBStore(db);\n\t\tconst fs = new (Async(StoreFS))(store);\n\t\tif (!options?.disableAsyncCache) {\n\t\t\tfs._sync = InMemory.create({ name: 'idb-cache' });\n\t\t}\n\t\treturn fs;\n\t},\n} as const satisfies Backend<StoreFS, IndexedDBOptions>;\n", "import type { Backend, Ino, SimpleSyncStore, Store } from '@zenfs/core';\nimport { ErrnoError, Errno, SimpleTransaction, StoreFS, decode, encode } from '@zenfs/core';\n\n/**\n * A synchronous key-value store backed by Storage.\n */\nexport class WebStorageStore implements Store, SimpleSyncStore {\n\tpublic get name(): string {\n\t\treturn WebStorage.name;\n\t}\n\n\tconstructor(protected _storage: Storage) {}\n\n\tpublic clear(): void {\n\t\tthis._storage.clear();\n\t}\n\n\tpublic clearSync(): void {\n\t\tthis._storage.clear();\n\t}\n\n\tpublic async sync(): Promise<void> {}\n\n\tpublic transaction(): SimpleTransaction {\n\t\t// No need to differentiate.\n\t\treturn new SimpleTransaction(this);\n\t}\n\n\tpublic get(key: Ino): Uint8Array | undefined {\n\t\tconst data = this._storage.getItem(key.toString());\n\t\tif (typeof data != 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\treturn encode(data);\n\t}\n\n\tpublic set(key: Ino, data: Uint8Array): void {\n\t\ttry {\n\t\t\tthis._storage.setItem(key.toString(), decode(data));\n\t\t} catch (e) {\n\t\t\tthrow new ErrnoError(Errno.ENOSPC, 'Storage is full.');\n\t\t}\n\t}\n\n\tpublic delete(key: Ino): void {\n\t\ttry {\n\t\t\tthis._storage.removeItem(key.toString());\n\t\t} catch (e) {\n\t\t\tthrow new ErrnoError(Errno.EIO, 'Unable to delete key ' + key + ': ' + e);\n\t\t}\n\t}\n}\n\n/**\n * Options to pass to the StorageFileSystem\n */\nexport interface WebStorageOptions {\n\t/**\n\t * The Storage to use. Defaults to globalThis.localStorage.\n\t */\n\tstorage?: Storage;\n}\n\n/**\n * A synchronous file system backed by a `Storage` (e.g. localStorage).\n */\nexport const WebStorage = {\n\tname: 'WebStorage',\n\n\toptions: {\n\t\tstorage: {\n\t\t\ttype: 'object',\n\t\t\trequired: false,\n\t\t\tdescription: 'The Storage to use. Defaults to globalThis.localStorage.',\n\t\t},\n\t},\n\n\tisAvailable(storage: Storage = globalThis.localStorage): boolean {\n\t\treturn storage instanceof globalThis.Storage;\n\t},\n\n\tcreate({ storage = globalThis.localStorage }: WebStorageOptions) {\n\t\treturn new StoreFS(new WebStorageStore(storage));\n\t},\n} as const satisfies Backend<StoreFS, WebStorageOptions>;\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "IndexedDB", "IndexedDBStore", "IndexedDBTransaction", "WebAccess", "WebAccessFS", "WebStorage", "WebStorageStore", "core_default", "Async", "AsyncTransaction", "BigIntStats", "BigIntStatsFs", "Dir", "Dirent", "Errno", "ErrnoError", "Fetch", "FetchFS", "File", "FileSystem", "FileType", "InMemory", "InMemoryStore", "IndexFS", "Inode", "LockedFS", "Mutex", "NoSyncFile", "Overlay", "OverlayFS", "Port", "PortFS", "PortFile", "PreloadFile", "ReadStream", "Readonly", "SimpleAsyncStore", "SimpleTransaction", "Stats", "StatsCommon", "StatsFs", "StoreFS", "Sync", "SyncTransaction", "Transaction", "UnlockedOverlayFS", "WriteStream", "ZenFsType", "_toUnixTimestamp", "access", "accessSync", "appendFile", "appendFileSync", "attachFS", "checkOptions", "chmod", "chmodSync", "chown", "chownSync", "close", "closeSync", "configure", "constants", "copyFile", "copyFileSync", "cp", "cpSync", "createReadStream", "createWriteStream", "decode", "decodeDirListing", "detachFS", "encode", "encodeDirListing", "errorMessages", "exists", "existsSync", "fchmod", "fchmodSync", "fchown", "fchownSync", "fdatasync", "fdatasyncSync", "flagToMode", "flagToNumber", "flagToString", "fs", "fstat", "fstatSync", "fsync", "fsyncSync", "ftruncate", "ftruncateSync", "futimes", "futimesSync", "isAppendable", "isBackend", "isBackendConfig", "isExclusive", "isReadable", "isSynchronous", "isTruncating", "isWriteable", "lchmod", "lchmodSync", "lchown", "lchownSync", "levenshtein", "link", "linkSync", "lopenSync", "lstat", "lstatSync", "lutimes", "lutimesSync", "mkdir", "mkdirSync", "mkdirpSync", "mkdtemp", "mkdtempSync", "mount", "mountObject", "mounts", "nop", "normalizeMode", "normalizeOptions", "normalizePath", "normalizeTime", "open", "openAsBlob", "openSync", "opendir", "opendirSync", "parseFlag", "promises", "randomIno", "read", "readFile", "readFileSync", "readSync", "readdir", "readdirSync", "readlink", "readlinkSync", "readv", "readvSync", "realpath", "realpathSync", "rename", "renameSync", "resolveMountConfig", "rm", "rmSync", "rmdir", "rmdirSync", "rootCred", "rootIno", "setImmediate", "size_max", "stat", "statSync", "statfs", "statfsSync", "symlink", "symlinkSync", "truncate", "truncateSync", "umount", "unlink", "unlinkSync", "unwatchFile", "utimes", "utimesSync", "watch", "watchFile", "write", "writeFile", "writeFileSync", "writeSync", "writev", "writevSync", "normalizeString", "path", "allowAboveRoot", "res", "lastSegmentLength", "lastSlash", "dots", "char", "i", "lastSlashIndex", "__name", "normalize", "path", "isAbsolute", "trailingSeparator", "normalizeString", "__name", "join", "parts", "joined", "normalize", "__name", "dirname", "path", "hasRoot", "end", "matchedSlash", "i", "__name", "basename", "suffix", "start", "extIdx", "firstNonSlashEnd", "errnoForDOMException", "ex", "__name", "convertException", "path", "syscall", "ErrnoError", "code", "Errno", "error", "WebAccessFS", "Async", "FileSystem", "InMemory", "handle", "path", "data", "stats", "currentStats", "oldPath", "newPath", "files", "file", "join", "oldFile", "destFolder", "dirname", "writable", "basename", "ex", "convertException", "ErrnoError", "Errno", "flag", "Stats", "FileType", "lastModified", "size", "PreloadFile", "srcpath", "keys", "key", "walked", "part", "dirHandle", "_ex", "fileHandle", "__name", "WebAccess", "options", "Errno", "errorMessages", "ErrnoError", "json", "err", "code", "path", "syscall", "errno", "message", "__name", "Transaction", "store", "__name", "AsyncTransaction", "Transaction", "ErrnoError", "__name", "wrap", "request", "resolve", "reject", "e", "convertException", "__name", "IndexedDBTransaction", "AsyncTransaction", "tx", "store", "key", "data", "createDB", "name", "indexedDB", "req", "db", "IndexedDBStore", "ErrnoError", "IndexedDB", "idbFactory", "options", "fs", "Async", "StoreFS", "InMemory", "WebStorageStore", "_storage", "WebStorage", "SimpleTransaction", "key", "data", "encode", "decode", "ErrnoError", "Errno", "e", "__name", "storage", "StoreFS"]
}
